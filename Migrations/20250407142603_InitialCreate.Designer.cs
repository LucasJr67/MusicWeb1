// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicWeb1.Models;

#nullable disable

namespace MusicWeb1.Migrations
{
    [DbContext(typeof(MusicWebDbContext))]
    [Migration("20250407142603_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FavoritePlaylist", b =>
                {
                    b.Property<int>("PlaylistId")
                        .HasColumnType("int")
                        .HasColumnName("PlaylistID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("PlaylistId", "UserId")
                        .HasName("PK__Favorite__6279EB4A4EF98B85");

                    b.HasIndex("UserId");

                    b.ToTable("FavoritePlaylists", (string)null);
                });

            modelBuilder.Entity("MusicWeb1.Models.Album", b =>
                {
                    b.Property<int>("AlbumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AlbumID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AlbumId"));

                    b.Property<int>("ArtistId")
                        .HasColumnType("int")
                        .HasColumnName("ArtistID");

                    b.Property<string>("CoverImage")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateOnly?>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("AlbumId")
                        .HasName("PK__Albums__97B4BE174D078D7B");

                    b.HasIndex("ArtistId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("MusicWeb1.Models.Artist", b =>
                {
                    b.Property<int>("ArtistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ArtistID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArtistId"));

                    b.Property<string>("ApprovalStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ArtistId")
                        .HasName("PK__Artists__25706B70CF170D7D");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("MusicWeb1.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CommentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("FeedbackId")
                        .HasColumnType("int")
                        .HasColumnName("FeedbackID");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("CommentId")
                        .HasName("PK__Comments__C3B4DFAA44605165");

                    b.HasIndex("FeedbackId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("MusicWeb1.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EventID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("NotificationId")
                        .HasColumnType("int")
                        .HasColumnName("NotificationID");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("EventId")
                        .HasName("PK__Events__7944C87081329014");

                    b.HasIndex("NotificationId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("MusicWeb1.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FeedbackID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("FeedbackId")
                        .HasName("PK__Feedback__6A4BEDF6E36BB878");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("MusicWeb1.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GenreID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("GenreId")
                        .HasName("PK__Genres__0385055EBAFECE4E");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("MusicWeb1.Models.ListenHistory", b =>
                {
                    b.Property<int>("ListenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ListenID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ListenId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Device")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DeviceType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Ip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("IP");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ListenDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PlayedDuration")
                        .HasColumnType("int");

                    b.Property<int>("SongId")
                        .HasColumnType("int")
                        .HasColumnName("SongID");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ListenId")
                        .HasName("PK__ListenHi__B2BCADCB946543F7");

                    b.HasIndex("SongId");

                    b.HasIndex("UserId");

                    b.ToTable("ListenHistories");
                });

            modelBuilder.Entity("MusicWeb1.Models.MusicEvent", b =>
                {
                    b.Property<int>("MusicEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MusicEventID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MusicEventId"));

                    b.Property<int>("ArtistId")
                        .HasColumnType("int")
                        .HasColumnName("ArtistID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("EventID");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("MusicEventId")
                        .HasName("PK__MusicEve__2D0C84D02158B9F3");

                    b.HasIndex("ArtistId");

                    b.HasIndex("EventId");

                    b.ToTable("MusicEvents");
                });

            modelBuilder.Entity("MusicWeb1.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NotificationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__20CF2E32E75EFB11");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("MusicWeb1.Models.NotificationType", b =>
                {
                    b.Property<int>("NotificationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NotificationTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationTypeId"));

                    b.Property<int?>("NotificationId")
                        .HasColumnType("int")
                        .HasColumnName("NotificationID");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("NotificationTypeId")
                        .HasName("PK__Notifica__299002A11AF6AD68");

                    b.HasIndex("NotificationId");

                    b.ToTable("NotificationTypes");
                });

            modelBuilder.Entity("MusicWeb1.Models.PasswordReset", b =>
                {
                    b.Property<int>("ResetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ResetID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResetId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ResetToken")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ResetId")
                        .HasName("PK__Password__783CF7AD33DFE2B1");

                    b.HasIndex("UserId");

                    b.ToTable("PasswordResets");
                });

            modelBuilder.Entity("MusicWeb1.Models.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PaymentMethodID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentMethodId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("PaymentMethodId")
                        .HasName("PK__PaymentM__DC31C1F34AA64086");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("MusicWeb1.Models.Playlist", b =>
                {
                    b.Property<int>("PlaylistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PlaylistID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlaylistId"));

                    b.Property<string>("CoverImage")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool?>("SystemGenerated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Visibility")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValue("Public");

                    b.HasKey("PlaylistId")
                        .HasName("PK__Playlist__B301678064A1FAB5");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("MusicWeb1.Models.PlaylistSong", b =>
                {
                    b.Property<int>("PlaylistId")
                        .HasColumnType("int")
                        .HasColumnName("PlaylistID");

                    b.Property<int>("SongId")
                        .HasColumnType("int")
                        .HasColumnName("SongID");

                    b.Property<DateTime?>("AddedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("AddedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("AddedByUserID");

                    b.Property<int?>("OrderIndex")
                        .HasColumnType("int");

                    b.HasKey("PlaylistId", "SongId")
                        .HasName("PK__Playlist__D22F5AEFAB35A2C3");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("SongId");

                    b.ToTable("PlaylistSongs");
                });

            modelBuilder.Entity("MusicWeb1.Models.RatingAlbum", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int>("AlbumId")
                        .HasColumnType("int")
                        .HasColumnName("AlbumID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("UserId", "AlbumId")
                        .HasName("PK__RatingAl__7EF3874D16C3F449");

                    b.HasIndex("AlbumId");

                    b.ToTable("RatingAlbums");
                });

            modelBuilder.Entity("MusicWeb1.Models.RatingPlaylist", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int>("PlaylistId")
                        .HasColumnType("int")
                        .HasColumnName("PlaylistID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("UserId", "PlaylistId")
                        .HasName("PK__RatingPl__0CB8DAD43596A360");

                    b.HasIndex("PlaylistId");

                    b.ToTable("RatingPlaylists");
                });

            modelBuilder.Entity("MusicWeb1.Models.RatingSong", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int>("SongId")
                        .HasColumnType("int")
                        .HasColumnName("SongID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("UserId", "SongId")
                        .HasName("PK__RatingSo__76A6F1C3C7B9E7E7");

                    b.HasIndex("SongId");

                    b.ToTable("RatingSongs");
                });

            modelBuilder.Entity("MusicWeb1.Models.ReportTargetType", b =>
                {
                    b.Property<int>("ReportTargetTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReportTargetTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportTargetTypeId"));

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FeedbackId")
                        .HasColumnType("int")
                        .HasColumnName("FeedbackID");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("ModeratorId")
                        .HasColumnType("int")
                        .HasColumnName("ModeratorID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TargetTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TargetTypeID");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ReportTargetTypeId")
                        .HasName("PK__ReportTa__F4C2F2BFF2D48D84");

                    b.HasIndex("FeedbackId");

                    b.HasIndex("ModeratorId");

                    b.HasIndex("TargetTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("ReportTargetTypes");
                });

            modelBuilder.Entity("MusicWeb1.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RoleId")
                        .HasName("PK__Roles__8AFACE3ACB7A3DE3");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("MusicWeb1.Models.Song", b =>
                {
                    b.Property<int>("SongId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SongID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SongId"));

                    b.Property<string>("AudioUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AudioURL");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("GenreId")
                        .HasColumnType("int")
                        .HasColumnName("GenreID");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Lyrics")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("SongId")
                        .HasName("PK__Songs__12E3D6F7D96908D8");

                    b.HasIndex("GenreId");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("MusicWeb1.Models.SongArtist", b =>
                {
                    b.Property<int>("SongId")
                        .HasColumnType("int")
                        .HasColumnName("SongID");

                    b.Property<int>("ArtistId")
                        .HasColumnType("int")
                        .HasColumnName("ArtistID");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("SongId", "ArtistId")
                        .HasName("PK__SongArti__00B4D040CAB4F8EA");

                    b.HasIndex("ArtistId");

                    b.ToTable("SongArtists");
                });

            modelBuilder.Entity("MusicWeb1.Models.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("StatusId")
                        .HasName("PK__Statuses__C8EE2043226E6BE0");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("MusicWeb1.Models.Subscription", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SubscriptionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsAutoRenew")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("PlanType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("SubscriptionId")
                        .HasName("PK__Subscrip__9A2B24BDA45678FA");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("MusicWeb1.Models.TargetType", b =>
                {
                    b.Property<int>("TargetTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TargetTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TargetTypeId"));

                    b.Property<string>("TargetTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("TargetTypeId")
                        .HasName("PK__TargetTy__B3CB14E11401C7DE");

                    b.ToTable("TargetTypes");
                });

            modelBuilder.Entity("MusicWeb1.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransactionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentMethodID");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("TransactionId")
                        .HasName("PK__Transact__55433A4BB8B75445");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("MusicWeb1.Models.TransactionStatus", b =>
                {
                    b.Property<int>("TransactionStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransactionStatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionStatusId"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int")
                        .HasColumnName("TransactionID");

                    b.HasKey("TransactionStatusId")
                        .HasName("PK__Transact__57B5E1A3663EE3FB");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionStatuses");
                });

            modelBuilder.Entity("MusicWeb1.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("GoogleId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("GoogleID");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsEmailVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsLogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CCAC70C5DF26");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SongStatus", b =>
                {
                    b.Property<int>("SongId")
                        .HasColumnType("int")
                        .HasColumnName("SongID");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.HasKey("SongId", "StatusId")
                        .HasName("PK__SongStat__3E6D34F36038C54A");

                    b.HasIndex("StatusId");

                    b.ToTable("SongStatuses", (string)null);
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PK__UserRole__AF27604F3E790A1A");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("FavoritePlaylist", b =>
                {
                    b.HasOne("MusicWeb1.Models.Playlist", null)
                        .WithMany()
                        .HasForeignKey("PlaylistId")
                        .IsRequired()
                        .HasConstraintName("FK_FavoritePlaylists_Playlists");

                    b.HasOne("MusicWeb1.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_FavoritePlaylists_Users");
                });

            modelBuilder.Entity("MusicWeb1.Models.Album", b =>
                {
                    b.HasOne("MusicWeb1.Models.Artist", "Artist")
                        .WithMany("Albums")
                        .HasForeignKey("ArtistId")
                        .IsRequired()
                        .HasConstraintName("FK_Albums_Artists");

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("MusicWeb1.Models.Comment", b =>
                {
                    b.HasOne("MusicWeb1.Models.Feedback", "Feedback")
                        .WithMany("Comments")
                        .HasForeignKey("FeedbackId")
                        .IsRequired()
                        .HasConstraintName("FK_Comments_Feedbacks");

                    b.HasOne("MusicWeb1.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Comments_Users");

                    b.Navigation("Feedback");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MusicWeb1.Models.Event", b =>
                {
                    b.HasOne("MusicWeb1.Models.Notification", "Notification")
                        .WithMany("Events")
                        .HasForeignKey("NotificationId")
                        .HasConstraintName("FK_Events_Notifications");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("MusicWeb1.Models.Feedback", b =>
                {
                    b.HasOne("MusicWeb1.Models.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Feedbacks_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MusicWeb1.Models.ListenHistory", b =>
                {
                    b.HasOne("MusicWeb1.Models.Song", "Song")
                        .WithMany("ListenHistories")
                        .HasForeignKey("SongId")
                        .IsRequired()
                        .HasConstraintName("FK_ListenHistories_Songs");

                    b.HasOne("MusicWeb1.Models.User", "User")
                        .WithMany("ListenHistories")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_ListenHistories_Users");

                    b.Navigation("Song");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MusicWeb1.Models.MusicEvent", b =>
                {
                    b.HasOne("MusicWeb1.Models.Artist", "Artist")
                        .WithMany("MusicEvents")
                        .HasForeignKey("ArtistId")
                        .IsRequired()
                        .HasConstraintName("FK_MusicEvents_Artists");

                    b.HasOne("MusicWeb1.Models.Event", "Event")
                        .WithMany("MusicEvents")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK_MusicEvents_Events");

                    b.Navigation("Artist");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("MusicWeb1.Models.Notification", b =>
                {
                    b.HasOne("MusicWeb1.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Notifications_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MusicWeb1.Models.NotificationType", b =>
                {
                    b.HasOne("MusicWeb1.Models.Notification", "Notification")
                        .WithMany("NotificationTypes")
                        .HasForeignKey("NotificationId")
                        .HasConstraintName("FK_NotificationTypes_Notifications");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("MusicWeb1.Models.PasswordReset", b =>
                {
                    b.HasOne("MusicWeb1.Models.User", "User")
                        .WithMany("PasswordResets")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_PasswordResets_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MusicWeb1.Models.PlaylistSong", b =>
                {
                    b.HasOne("MusicWeb1.Models.User", "AddedByUser")
                        .WithMany("PlaylistSongs")
                        .HasForeignKey("AddedByUserId")
                        .HasConstraintName("FK_PlaylistSongs_Users");

                    b.HasOne("MusicWeb1.Models.Playlist", "Playlist")
                        .WithMany("PlaylistSongs")
                        .HasForeignKey("PlaylistId")
                        .IsRequired()
                        .HasConstraintName("FK_PlaylistSongs_Playlists");

                    b.HasOne("MusicWeb1.Models.Song", "Song")
                        .WithMany("PlaylistSongs")
                        .HasForeignKey("SongId")
                        .IsRequired()
                        .HasConstraintName("FK_PlaylistSongs_Songs");

                    b.Navigation("AddedByUser");

                    b.Navigation("Playlist");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("MusicWeb1.Models.RatingAlbum", b =>
                {
                    b.HasOne("MusicWeb1.Models.Album", "Album")
                        .WithMany("RatingAlbums")
                        .HasForeignKey("AlbumId")
                        .IsRequired()
                        .HasConstraintName("FK_RatingAlbums_Albums");

                    b.HasOne("MusicWeb1.Models.User", "User")
                        .WithMany("RatingAlbums")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_RatingAlbums_Users");

                    b.Navigation("Album");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MusicWeb1.Models.RatingPlaylist", b =>
                {
                    b.HasOne("MusicWeb1.Models.Playlist", "Playlist")
                        .WithMany("RatingPlaylists")
                        .HasForeignKey("PlaylistId")
                        .IsRequired()
                        .HasConstraintName("FK_RatingPlaylists_Playlists");

                    b.HasOne("MusicWeb1.Models.User", "User")
                        .WithMany("RatingPlaylists")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_RatingPlaylists_Users");

                    b.Navigation("Playlist");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MusicWeb1.Models.RatingSong", b =>
                {
                    b.HasOne("MusicWeb1.Models.Song", "Song")
                        .WithMany("RatingSongs")
                        .HasForeignKey("SongId")
                        .IsRequired()
                        .HasConstraintName("FK_RatingSongs_Songs");

                    b.HasOne("MusicWeb1.Models.User", "User")
                        .WithMany("RatingSongs")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_RatingSongs_Users");

                    b.Navigation("Song");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MusicWeb1.Models.ReportTargetType", b =>
                {
                    b.HasOne("MusicWeb1.Models.Feedback", "Feedback")
                        .WithMany("ReportTargetTypes")
                        .HasForeignKey("FeedbackId")
                        .HasConstraintName("FK_ReportTargetTypes_Feedbacks");

                    b.HasOne("MusicWeb1.Models.User", "Moderator")
                        .WithMany("ReportTargetTypeModerators")
                        .HasForeignKey("ModeratorId")
                        .HasConstraintName("FK_ReportTargetTypes_Moderator");

                    b.HasOne("MusicWeb1.Models.TargetType", "TargetType")
                        .WithMany("ReportTargetTypes")
                        .HasForeignKey("TargetTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_ReportTargetTypes_TargetTypes");

                    b.HasOne("MusicWeb1.Models.User", "User")
                        .WithMany("ReportTargetTypeUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_ReportTargetTypes_Users");

                    b.Navigation("Feedback");

                    b.Navigation("Moderator");

                    b.Navigation("TargetType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MusicWeb1.Models.Song", b =>
                {
                    b.HasOne("MusicWeb1.Models.Genre", "Genre")
                        .WithMany("Songs")
                        .HasForeignKey("GenreId")
                        .HasConstraintName("FK_Songs_Genres");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("MusicWeb1.Models.SongArtist", b =>
                {
                    b.HasOne("MusicWeb1.Models.Artist", "Artist")
                        .WithMany("SongArtists")
                        .HasForeignKey("ArtistId")
                        .IsRequired()
                        .HasConstraintName("FK_SongArtists_Artists");

                    b.HasOne("MusicWeb1.Models.Song", "Song")
                        .WithMany("SongArtists")
                        .HasForeignKey("SongId")
                        .IsRequired()
                        .HasConstraintName("FK_SongArtists_Songs");

                    b.Navigation("Artist");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("MusicWeb1.Models.Subscription", b =>
                {
                    b.HasOne("MusicWeb1.Models.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Subscriptions_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MusicWeb1.Models.Transaction", b =>
                {
                    b.HasOne("MusicWeb1.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Transactions")
                        .HasForeignKey("PaymentMethodId")
                        .HasConstraintName("FK_Transactions_PaymentMethods");

                    b.HasOne("MusicWeb1.Models.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Transactions_Users");

                    b.Navigation("PaymentMethod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MusicWeb1.Models.TransactionStatus", b =>
                {
                    b.HasOne("MusicWeb1.Models.Transaction", "Transaction")
                        .WithMany("TransactionStatuses")
                        .HasForeignKey("TransactionId")
                        .IsRequired()
                        .HasConstraintName("FK_TransactionStatuses_Transactions");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("SongStatus", b =>
                {
                    b.HasOne("MusicWeb1.Models.Song", null)
                        .WithMany()
                        .HasForeignKey("SongId")
                        .IsRequired()
                        .HasConstraintName("FK_SongStatuses_Songs");

                    b.HasOne("MusicWeb1.Models.Status", null)
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_SongStatuses_Statuses");
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.HasOne("MusicWeb1.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRoles_Roles");

                    b.HasOne("MusicWeb1.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRoles_Users");
                });

            modelBuilder.Entity("MusicWeb1.Models.Album", b =>
                {
                    b.Navigation("RatingAlbums");
                });

            modelBuilder.Entity("MusicWeb1.Models.Artist", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("MusicEvents");

                    b.Navigation("SongArtists");
                });

            modelBuilder.Entity("MusicWeb1.Models.Event", b =>
                {
                    b.Navigation("MusicEvents");
                });

            modelBuilder.Entity("MusicWeb1.Models.Feedback", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("ReportTargetTypes");
                });

            modelBuilder.Entity("MusicWeb1.Models.Genre", b =>
                {
                    b.Navigation("Songs");
                });

            modelBuilder.Entity("MusicWeb1.Models.Notification", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("NotificationTypes");
                });

            modelBuilder.Entity("MusicWeb1.Models.PaymentMethod", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("MusicWeb1.Models.Playlist", b =>
                {
                    b.Navigation("PlaylistSongs");

                    b.Navigation("RatingPlaylists");
                });

            modelBuilder.Entity("MusicWeb1.Models.Song", b =>
                {
                    b.Navigation("ListenHistories");

                    b.Navigation("PlaylistSongs");

                    b.Navigation("RatingSongs");

                    b.Navigation("SongArtists");
                });

            modelBuilder.Entity("MusicWeb1.Models.TargetType", b =>
                {
                    b.Navigation("ReportTargetTypes");
                });

            modelBuilder.Entity("MusicWeb1.Models.Transaction", b =>
                {
                    b.Navigation("TransactionStatuses");
                });

            modelBuilder.Entity("MusicWeb1.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Feedbacks");

                    b.Navigation("ListenHistories");

                    b.Navigation("Notifications");

                    b.Navigation("PasswordResets");

                    b.Navigation("PlaylistSongs");

                    b.Navigation("RatingAlbums");

                    b.Navigation("RatingPlaylists");

                    b.Navigation("RatingSongs");

                    b.Navigation("ReportTargetTypeModerators");

                    b.Navigation("ReportTargetTypeUsers");

                    b.Navigation("Subscriptions");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
